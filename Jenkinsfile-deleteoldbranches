import groovy.json.JsonSlurperClassic
import groovy.json.JsonOutput

pipeline {
    agent any
    // triggers {
    //     //Run once a week every Saturday
    // cron('30 0 * * 6')
    // }
    options {
		buildDiscarder(logRotator(numToKeepStr: '100'))
		disableConcurrentBuilds()
		timestamps()
	}
    environment {
        GIT_ORG                 = 'git@github.com:ajaysharma507'
    }
    stages {
        stage ('Git backup'){
            steps {
                script {
                        echo "deleting 6 months old tags"
                        deleteTags('ajaysharma507', 100)
                    }
                }
            }
    }
    //post {
        //failure  {
            //slackSend channel: '#devops-monitor',color: 'bad', tokenCredentialId: 'polar-slack',message: "FAILURE: #${BUILD_NUMBER} build FAILED!\n${RUN_DISPLAY_URL}"
       // }
   // }
}


def deleteTags(organization, limit)  {
    // Set the credentials for authenticating with the GitHub API
    def credentials = [
        username: 'ajaysharma507@gmail.com',
        password: "Employeesupport@5"
    ]

    // Set the URL for the GitHub API
    def apiUrl = 'https://api.github.com'

    // Set the URL for the organization's repositories
    def reposUrl = "${apiUrl}/orgs/${organization}/repos"


  // Get current timestamp
    def currentDate = new Date()
                    
    // Calculate timestamp for 6 months ago
   def sixMonthsAgo = new Date() - 183 // 6 months in days
                    
    // Get list of tags
    def tags = sh(script: 'git tag -l', returnStdout: true).trim().split('\n')


    // Set the authentication headers
    def authHeaders = [
        "Authorization": "Basic " + "${credentials.username}:${credentials.password}".getBytes().encodeBase64().toString(),
        "Content-Type": "application/json"
    ]

    // Set the parameters for the API request
    def params = [
        "type": "all",
        "per_page": "${limit}",
        //"archived": "false"
    ]

    // Send the API request and store the response
    def response = new URL(reposUrl).getText(requestProperties: authHeaders, query: params)

    // Parse the JSON response and print the names of the repositories
    def json = new groovy.json.JsonSlurperClassic().parseText(response)
    

    json.each { repo ->
        global_prettyPrintWithHeaderAndFooter header: "Looping through git repo", body: "${repo.name}", lineLenght: 20
        def repoUrl = "${GIT_ORG}/${repo.name}.git"
        checkout([$class: 'GitSCM', branches: [[name: 'main']], userRemoteConfigs: [[url: "${repoUrl}", credentialsId:'377f8df0-2d19-450e-a33c-b11da6de3837']]])

    tags.each { tag ->
        def tagDate = sh(script: "git log -1 --format=%ai ${tag}", returnStdout: true).trim()
            def parsedTagDate = new Date(tagDate)
            if (parsedTagDate.before(sixMonthsAgo)) {
                sh "git tag -d ${tag}"
                sh "git push origin :refs/tags/${tag}"
                echo "Deleted old tag: ${tag}"
       }
    }
  }
}











